	#!/bin/bashSECONDS=0#change working dictionarycd /Users/Bioinformatics/yolk_sac/data/human#STEP 1: Run fastqcfastqc data/*.fastq -o data/#multiqc on fastqc files#activate multiqcmq#start multiqcmultiqc data/*fastqc* -o data/multiqc#STEP 2: Trim poor quality readsmove fastq files into new directorymkdir post_trimcp ../data/*.fastq ../data/post_trim activate trimmomatic and start trimming#remember to place adapter.fa in this post_trim folder#trimfor R1 in *_1.fastqdo        R2="${R1%_1.fastq}_2.fastq"        trimmomatic PE "$R1" "$R2" "${R1%.*}_trimmed.fastq" "${R1%.*}_trimmed.un.fastq" "${R2%.*}_trimmed.fastq" "${R2%.*}_trimmed.un.fastq" \        ILLUMINACLIP:TruSeq3-PE-2.fa:2:30:10 LEADING:3 TRAILING:3 MINLEN:36done#trim for single endfor R1 in *.fastqdo	trimmomatic SE -phred33 "$R1" "${R1%.*}_trimmed.fastq" "${R1%.*}_trimmed.un.fastq" \	ILLUMINACLIP:TruSeq2-SE.fa:2:30:10 LEADING:3 TRAILING:3 MINLEN:36done#trimming SE for low quality reads only, no adapter trimmingfor R1 in *.fastqdo	trimmomatic SE -phred33 "$R1" "${R1%.*}_trimmed.fastq" \	SLIDINGWINDOW:4:15 LEADING:3 TRAILING:3 MINLEN:36done#do fastqc on the trimmed fastqc filesfastqc *trimmed.fastq #multiqcmqmultiqc *fastqc* -o multiqc/#alignment with HISAT2for fname in *_1.fastqdo	base=${fname%_1.fastq}#Align paired-end reads    hisat2 -x ../../../HISAT2/grch38/genome -1 "${base}_1.fastq" -2 "${base}_2.fastq" -S "${base}.sam"#done#alignment HISAT2 for single endfor fname in *.fastqdo	base=${fname%.fastq}#Align single-end reads	hisat2 -x ../../../HISAT2/grch38/genome -U "${base}.fastq" -S "${base}.sam"done#yolk sacfor fname in *_M.fastqdo       base=${fname%_M.fastq}Align single-end reads       hisat2 -x HISAT2/mm10/genome -U "${base}_M.fastq" -S "${base}_M.sam"done#convert SAM to BAM and sort:for f in *.samdo	bam_file="${f%%.sam}.bam"	samtools view -bS "$f" > "$bam_file"	samtools sort "$bam_file" -o "${f%%.sam}.sorted.bam"done#generate countsfeatureCounts -p -a Homo_sapiens.GRCh38.110.gtf -o countiMac.txt *sorted.bam#generate counts for mousefeatureCounts -a Mus_musculus.GRCm39.111.gtf -o countM.txt -s 0 *_M.sorted.bam#generate counts for SEfeatureCounts -a Homo_sapiens.GRCh38.110.gtf -o countHYS.txt -s 0 *sorted.bam less count.txtcut -f1,7,8,9,10 count.txt > clean_count.txtless clean_count.txtmultqic for count.txt.summarymultiqc count.txt.summary#run kallisto for human yolk sac Replace these paths with your actual pathsINDEX="/Users/sueannechear/Bioinformatics/yolk_sac/data2/human_index.idx"cd /Users/sueannechear/Bioinformatics/yolk_sac/data2/iMAC# Iterate over all fastq files in the current directoryfor file in *_H.fastqdo    # Get the base name of the file without the extension    sample_name="${file%.*}"    echo $sample_name        # Run Kallisto quant for each fastq file    kallisto quant -i $INDEX -o output2/$sample_name --single -l 50 -s 20 $filedone#run kallisto for mouse  yolk sac Replace these paths with your actual pathsINDEX="/Users/sueannechear/Bioinformatics/yolk_sac/data2/mouse_index.idx"# Iterate over all fastq files in the current directoryfor file in *_M.fastqdo    # Get the base name of the file without the extension    sample_name="${file%.*}"    echo $sample_name    # Run Kallisto quant for each fastq file    kallisto quant -i $INDEX -o output3/$sample_name --single -l 50 -s 20 $filedone#kallisto for paired endfor file in *_1.fqdo	base=${file%_1.fq}	echo $base	kallisto quant -i $INDEX -o output2/$base "${base}_1.fq" "${base}_2.fq"done#duration=$SECONDS#echo "$(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed."